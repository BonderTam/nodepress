import { Types } from 'mongoose';
import { DocumentType } from '@typegoose/typegoose';
import { MongooseModel } from '@app/interfaces/mongoose.interface';
import { PaginateResult, PaginateOptions } from '@app/utils/paginate';
import { ArticleService } from '@app/modules/article/article.service';
import { IPService } from '@app/processors/helper/helper.service.ip';
import { EmailService } from '@app/processors/helper/helper.service.email';
import { AkismetService } from '@app/processors/helper/helper.service.akismet';
import { QueryVisitor } from '@app/decorators/query-params.decorator';
import { OptionService } from '@app/modules/option/option.service';
import { Comment, CreateCommentBase, CommentsStatePayload } from './comment.model';
export declare class CommentService {
    private readonly ipService;
    private readonly emailService;
    private readonly akismetService;
    private readonly optionService;
    private readonly articleService;
    private readonly commentModel;
    constructor(ipService: IPService, emailService: EmailService, akismetService: AkismetService, optionService: OptionService, articleService: ArticleService, commentModel: MongooseModel<Comment>);
    private emailToAdminAndTargetAuthor;
    private submitCommentAkismet;
    private updateCommentCountWithArticle;
    private updateBlocklistAkismetWithComment;
    isNotBlocklisted(comment: Comment): Promise<void>;
    isCommentableTarget(targetPostID: number): Promise<void>;
    getAll(): Promise<Array<Comment>>;
    paginater(querys: any, options: PaginateOptions, hideIPEmail?: boolean): Promise<PaginateResult<Comment>>;
    normalizeNewComment(comment: CreateCommentBase, visitor: QueryVisitor): Comment;
    create(comment: Comment): Promise<Comment>;
    createFormClient(comment: CreateCommentBase, visitor: QueryVisitor): Promise<Comment>;
    getDetailByObjectID(commentID: Types.ObjectId): Promise<Comment>;
    getDetailByNumberID(commentID: number): Promise<DocumentType<Comment>>;
    vote(commentID: number, isLike: boolean): Promise<{
        likes: number;
        dislikes: number;
    }>;
    update(commentID: Types.ObjectId, newComment: Partial<Comment>, referer?: string): Promise<Comment>;
    delete(commentID: Types.ObjectId): Promise<Comment>;
    batchPatchState(action: CommentsStatePayload, referer: string): Promise<import("mongodb").UpdateResult>;
    batchDelete(commentIDs: Types.ObjectId[], postIDs: number[]): Promise<import("mongodb").DeleteResult>;
}
